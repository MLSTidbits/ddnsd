#!/usr/bin/env bash

# Copyright (C) 2025 Michael Schaecher <michaelschaecher@mlstidbits.com>
# Copyright (C) 2025 MLS Tidbits <contact@mlstidbits.com>

# This program is free software: you can redistribute it and/or modify.

# Check if the script is run as root
function root-check () {
    (( "$(id -u)" == 0 )) || echo "This script must be run as root"
}

# shellcheck disable=SC2329
function sign_handler () {

    local _signal="${1:-SIGINT}"

    case "${_signal}" in
        SIGINT|SIGTERM|SIGQUIT  )
            event-log "info" "Received signal: ${_signal}. Stopping ddnsd service..."
        ;;
        *                       )
            event-log "warning" "Received unknown signal: ${_signal}"
        ;;
    esac

    exit 0

}

# shellcheck disable=SC2155
function event-log () {

    local _event="${1:-info}"
    local _message="${2:-No message provided}"

    case "$_event" in
        info|warning                )
            logger -t "${_name}" -p user."$_event" "$_message"
        ;;
        error|critical              )
            logger -t "$_name" -p user."$_event" "$_message"
            exit 1
        ;;
        *                           )
            logger -t "$_name" -p user.unknown "$_message"
        ;;
    esac

}

# shellcheck disable=SC2155
function monitor-ip-address () {

    root-check

    [[ "$_domain" == "Null" ]] && event-log "error" "Domain Name is required, see $_config"

    [[ "$_token" == "Null" ]] && event-log "error" "Missing API Token for Cloudflare!"

    while true ; do

        # Check if the IP lookup service is set
        local _current="$(check-ip)"
        local _saved="$(current-ip)"

        [[ "$_current" == "" ]] &&
        event-log "warning" "Failed to retrieve current IP address from $_lookup service"

        [[ "$_current" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] &&
        event-log "info" "Current IP address retrieved: $_current"

        [[ "${_saved}" != "${_current}" ]] &&
        event-log "info" "IP address changed: ${_saved} -> ${_current}"

        case "${_provider}" in
            duck            ) duck-ddns       ;;
            cloudflare      ) cloudflare-ddns ;;
            *               )
                event-log "error" "Unsupported DDNS provider: ${_provider}"
            ;;
        esac

        event-log "info" "DDNS update completed for ${_domain} with IP ${_current}"

        sleep 5m ; continue
    done
}

# shellcheck disable=SC2155
function stop-ddnsd () {

    root-check
    echo "Stopping ddnsd service..."

    systemctl stop ddnsd.service || event-log "warning" "ddnsd service is not running."

    # Stop the ddnsd service and all instances of ddnsd
    pkill -f ddnsd || echo "No ddnsd process found to stop."
    rm -f "$_ip" ||
    event-log "error" "Failed to remove IP address file ${_ip}."

    event-log "info" "ddnsd service stopped."

}

# shellcheck disable=SC2155
function duck-ddns () {

    event-log "info" "Configuring DuckDNS for domain $_domain..."

    local _url="https://www.duckdns.org/update?domains=${_domain}&token=$_token&ip="

    [[ "$_verbose" == "" || "$_verbose" == "Null" ]] &&
    event-log "error" "Verbose setting is required for DuckDNS, see $_config"

    [[ "$_insecure" == "" || "$_insecure" == "Null" ]] &&
    event-log "error" "Insecure setting is required for DuckDNS, see $_config"

    [[ "$_insecure" == "true" ]] && {
    event-log "warning" "Insecure mode enabled. SSL certificate verification is disabled."
    _secure="-kk" ; }

    [[ "$_insecure" == "false" ]] && _secure="-k"

    _ddns="$(curl -s "url=${_url}&${_verbose}" | grep -oE 'OK|KO')"

    [[ "$_ddns" == "OK" ]] &&
    event-log "info" "DuckDNS update successful for domain ${_domain}."

    [[ "$_ddns" == "KO" ]] &&
    event-log "error" "DuckDNS update failed for domain ${_domain}."

    [[ "$_ddns" != "OK" && "$_ddns" != "KO" ]] &&
    event-log "error" "Unexpected response from DuckDNS: ${_ddns}"

}

# shellcheck disable=SC2155
function cloudflare-ddns () {

    event-log "info" "Configuring Cloudflare for domain $_domain"

    # Verify that the Cloudflare email set and is in the correct format
    [[ "$_email" != "" && "$_email" != "Null" ]] ||
    event-log "error" "Cloudflare email is required, see $_config"

    [[ ! "$_email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]] &&
    event-log "error" "$_email Invalid email format for Cloudflare, see $_config"

    # Verify that the Cloudflare Zone ID is set
    [[ "$_id" != "" && "$_id" != "Null" ]] ||
    event-log "error" "Cloudflare Zone ID is required, see $_config"

    local _keyUrl="https://api.cloudflare.com/client/v4/user/tokens/verify"
    local _idURL="https://api.cloudflare.com/client/v4/zones"


    # Check if method is either token or global
    case "$_method" in
        "token"                 ) _header="Authorization: Bearer" ;;
        "global"                ) _header="X-Auth-Key"            ;;
        *                       )
            event-log "error" "Unsupported Cloudflare authentication method: $_method"
        ;;
    esac

    local _verify="$(curl -X GET "$_keyUrl" \
        --header "$_header $_token" \
        --header "Content-Type:  application/json" | jq -r '.result.status')"

    test "${_verify}" = "active" ||
    event-log "error" "Cloudflare API token verification failed."

    event-log "info" "Verified Cloudflare API token = ${_verify}"

    local _record=$(curl -s -X GET "$_idURL/$_id{/dns_records?type=A&name=$_domain}" \
        --header "X-Auth-Email: $_email" \
        --header "$_header $_token" \
        --header "Content-Type: application/json" | jq -r '.success')

    [[ "$_record" == "false" ]] &&
    event-log "error" "No DNS record found for $_domain in zone $_id"

    event-log "info" "Found DNS record for $_domain in zone $_id"

    local _current="$(check-ip)"

    local _update="$(curl -sS -X PUT "$_idURL/$_id/dns_records/$_record" \
        --header "X-Auth-Email: $_email" \
        --header "$_header $_token" \
        --header "Content-Type: application/json" \
        --data "{
            \"type\": \"A\",
            \"name\": \"${_domain}\",
            \"content\": \"$_current\",
            \"ttl\": $_ttl,
            \"proxied\": $_proxy
        }" | jq -r '.success')"

        test "$_update" = "true" ||
        event-log "error" "Failed to update Cloudflare DNS record for $_domain"

    event-log "info" "Cloudflare DNS record updated successfully."

}

function check-ip () {

    local _service

    case "$_lookup" in
        "icanhazip"             ) _service="$_lookup.com"   ;;
        "ipinfo"                ) _service="$_lookup.io/ip" ;;
        "ifconfig"              ) _service="$_lookup.co"    ;;
        *                       )
            event-log "error" "Unsupported IP lookup service: $_lookup"
        ;;
    esac

    curl -s "https://$_service"
}

function ddnsd-conf () {

    # Check if the user is root or has permission to edit the configuration file.
    # if check fails then rerun the script with sudo.
    root-check

    if $_editor "$_config" ; then
        event-log "info" "Configuration file $_config edited successfully."
    else
        echo "Failed to open configuration file in ${_editor}."
        event-log "error" "Failed to open configuration file in ${_editor}."
    fi

}

function current-ip () { ping -c 1 "$_domain" | awk 'NR==2 {print $5}' | tr -d '():' ; }

function restart-ddnsd () { root-check ; systemctl restart ddnsd.service ; }

# Uncomment for debugging
# set -euox pipefail

_name="ddnsd"
_version="$(cat /usr/share/doc/${_name}/version 2>/dev/null || echo "unknown")"
_editor="${EDITOR:-nano}"

_config="/etc/ddnsd/config"

# shellcheck disable=SC1090
source "$_config"

### Global Configuration Variables ###

_lookup="${LOOKUP:-icanhazip}"
_provider="${PROVIDER:-duckdns}"
_domain="${DOMAIN:-Null}"
_token="${TOKEN:-Null}"

### Cloudflare Specific Configuration Variables ###

_email="${EMAIL:-Null}"
_method="${METHOD:-token}"
_id="${ID:-Null}"
_proxy="${PROXY:-false}"
_ttl="${TTL:-300}"

### DuckDNS Specific Configuration Variables ###

_insecure="${INSECURE:-false}"
_verbose="${VERBOSE:-false}"

# Trap errors and log them
trap sign_handler SIGINT SIGTERM SIGQUIT

_versionInfo="$(cat <<EOF
${_name} - [ Version: ${_version} ] - License: GPLv3.0"
EOF
)"

_helpInfo="$(cat <<EOF
${_versionInfo}

Usage: ${_name} [start|stop|restart|status|config|help|version]

Options:
    start           Start monitoring for IP changes and update DDNS
    stop            Stop the ddnsd systemd service
    restart         Restart the ddnsd systemd service
    status          Show the status of the ddnsd service
    config          Show the current configuration (use 'config <provider>' to edit)
    help            Show this help message
    version         Show version information

Version: ${_version}
EOF
)"

[[ "$(check-ip)" != "$(current-ip)" ]] && _ip="$(current-ip) OUTDATED"
[[ "$(check-ip)" == "$(current-ip)" ]] && _ip="$(current-ip) CURRENT"

_statusInfo="$(cat <<EOF
${_versionInfo}

DDNS Provider:          $_provider
Domain Name:            $_domain
Token Set:              $_token
IP Address:             $_ip

Service:                $(systemctl is-active --quiet ddnsd.service && echo "active" || echo "inactive")
DDNS Status:            $(ping -c 1 "$_domain" &> /dev/null && echo "reachable" || echo "unreachable")

Lookup Service:         $_lookup
EOF
)"



# shellcheck disable=SC2154
case "${1}" in
    start                       ) monitor-ip-address     ;;
    stop                        ) stop-ddnsd             ;;
    restart                     ) restart-ddnsd          ;;
    status                      ) echo "${_statusInfo}"  ;;
    config                      ) ddnsd-conf "$@"        ;;
    help                        ) echo "${_helpInfo}"    ;;
    version                     ) echo "${_versionInfo}" ;;
    *                           )
        echo "Invalid option: ${1}"
        echo "Use '${_name} help' for usage information."
        exit 1
esac

exit 0
