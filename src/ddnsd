#!/usr/bin/env bash

# Copyright (C) 2025 Michael Schaecher <MichaelLeeSchaecher@gmail.com>

# Check if the script is run as root
function root-check () {
    (( "$(id -u)" == 0 )) || echo "This script must be run as root"
}

# shellcheck disable=SC2329
function sign_handler () {

    local _signal; _signal="${1:-SIGINT}"

    case "${_signal}" in
        SIGINT|SIGTERM|SIGQUIT  )
            event-log "info" "Received signal: ${_signal}. Stopping ddnsd service..."
        ;;
        *                       )
            event-log "warning" "Received unknown signal: ${_signal}"
        ;;
    esac

    exit 0

}

function event-log () {

    local _eventType="${1:-info}"
    local _eventMessage="${2:-No message provided}"

    case "${_eventType}" in
        info|warning|error|critical )
            logger -t "${_name}" -p user.${_eventType} "${_eventMessage}"
            [[ "${_eventType}" == "error" ]] && exit 1
        ;;
        *                           )
            logger -t "${_name}" -p user.unknown "${_eventMessage}"
        ;;
    esac

}

function monitor-ip-address () {

    root-check ; event-log "info" "Starting ddnsd service..."

    [[ "$_domain" == "" || "$_domain" == "Null" ]] &&
    event-log "error" "Domain Name is required, see $USER/.config/ddnsd/config.yaml"

    [[ "$_token" == "" || "$_token" == "Null" ]] &&
    event-log "error" "Missing API Token for Cloudflare!"

    while true ; do

        event-log "info" "Checking IP address using $_lookup service"

        # Check if the IP lookup service is set
        _current="$(check-ip)"

        _saved="$(cat /tmp/ddnsd.ip 2>/dev/null || echo "unknown")"

        if test "${_saved}" != "${_current}" ; then
            event-log "info" "IP address changed: ${_saved} -> ${_current}"
            echo "${_current}" > /tmp/ddnsd.ip

            case "${_provider}" in
                duck            ) duck_ddnsd       ;;
                cloudflare      ) cloudflare_ddnsd ;;
                *               )
                    echo "Unsupported DDNS provider: ${_provider}"
                    exit 1
                ;;
            esac

            event-log "info" "DDNS update completed for ${_domain} with IP ${_current}"
        fi

        sleep 5m ; continue
    done
}

function stop-ddnsd () {

    root-check
    echo "Stopping ddnsd service..."

    systemctl stop ddnsd.service || event-log "warning" "ddnsd service is not running."

    # Stop the ddnsd service and all instances of ddnsd
    pkill -f ddnsd || echo "No ddnsd process found to stop."
    rm -f ${_ddnsdIPFile} ||
    event-log "error" "Failed to remove IP address file ${_ddnsdIPFile}."

    event-log "info" "ddnsd service stopped."

}

function duck_ddnsd () {

    event-log "info" "Configuring DuckDNS for domain $_domain..."

    local _url _secure _verbose _ddns

    _url="https://www.duckdns.org/update?domains=${_domain}&token=${_apiToken}&ip="

    [[ "$_verbose" == "" || "$_verbose" == "Null" ]] &&
    event-log "error" "Verbose setting is required for DuckDNS, see $_config"

    [[ "$_insecure" == "" || "$_insecure" == "Null" ]] &&
    event-log "error" "Insecure setting is required for DuckDNS, see $_config"

    [[ "$_insecure" == "true" ]] && {
    event-log "warning" "Insecure mode enabled. SSL certificate verification is disabled."
    _secure="-kk" ; }

    [[ "$_insecure" == "false" ]] && _secure="-k"

    _ddns="$(curl -s "url=${_url}&${_verbose}" | grep -oE 'OK|KO')"

    [[ "$_ddns" == "OK" ]] &&
    event-log "info" "DuckDNS update successful for domain ${_domain}."

    [[ "$_ddns" == "KO" ]] &&
    event-log "error" "DuckDNS update failed for domain ${_domain}."

    [[ "$_ddns" != "OK" && "$_ddns" != "KO" ]] &&
    event-log "error" "Unexpected response from DuckDNS: ${_ddns}"

}

function cloudflare_ddnsd () {

    event-log "info" "Configuring Cloudflare for domain ${_domain}..."

    # Verify that the Cloudflare email set and is in the correct format
    [[ "${_cloudflareEmail}" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]] || {
        echo "Invalid Cloudflare email format: ${_cloudflareEmail}" ; exit 1
    }

    # Verify that the Cloudflare Zone ID is set
    test -n "${_cloudflareZoneID}" || { echo "Please set CLOUDFLARE_ZONE_ID in the configuration." ; exit 1 ; }

    local _secure _verbose _current _keyUrl _authHeader _cloudflareURL

    _keyUrl="https://api.cloudflare.com/client/v4/user/tokens/verify"
    _cloudflareURL="https://api.cloudflare.com/client/v4/zones"


    # Check if method is either token or global
    case "${_cloudflareMethod}" in
        "token"                 ) _authHeader="Authorization: Bearer" ;;
        "global"                ) _authHeader="X-Auth-Key"            ;;
        *                       )
            echo "Invalid Cloudflare method: ${_cloudflareMethod}. Use 'token' or 'global'."
            exit 1
        ;;
    esac

    verifyKey="$(curl -X GET "$_keyUrl" --header "${_authHeader} ${_apiToken}" \
        --header "Content-Type:  application/json" | jq -r '.result.status')"

    test "${verifyKey}" = "active" || { echo "(Cloudflare) API Token not active or invalid." ; exit 1 ; }

    event-log "info" "Verified Cloudflare API token = ${verifyKey}"

    _recordID=$(curl -s -X GET "${_cloudflareURL}/${_cloudflareZoneID}{/dns_records?type=A&name=${_domain}}" \
        --header "X-Auth-Email: ${_cloudflareEmail}" \
        --header "${_authHeader} ${_apiToken}" \
        --header "Content-Type: application/json" | jq -r '.result[].id')

    test -n "${_recordID}" || { echo "No DNS record found for domain ${_domain}." ; exit 1 ; }

     _recordUpdate="$(curl -s -X PATCH "${_cloudflareURL}/${_cloudflareZoneID}/dns_records/${_recordID}" \
        --header "X-Auth-Email: ${_cloudflareEmail}" \
        --header "${_authHeader} ${_apiToken}" \
        --header "Content-Type: application/json" \
        --data "{
            \"type\": \"A\",
            \"name\": \"${_domain}\",
            \"content\": \"$(cat ${_ddnsdIPFile})\",
            \"ttl\": ${_cloudflareTTL},
            \"proxied\": ${_cloudflareProxy}
        }" | jq -r '.success')"

        test "${_recordUpdate}" = "true" || { event-log "error" "${_domain} dns record update failed." ; exit 1 ; }

    event-log "info" "Cloudflare DNS record updated successfully."

}

function check-ip () {

    local _ip

    case "${_ipLookup}" in
        "icanhazip"             ) _ip="${_ipLookup}.com"   ;;
        "ipinfo"                ) _ip="${_ipLookup}.io/ip" ;;
        "ifconfig"              ) _ip="${_ipLookup}.co"    ;;
        *                       )
            event-log "error" "Unsupported IP lookup service: ${_ipLookup}"
            exit 1
        ;;
    esac

    curl -s "https://${_ip}"
}

function edit_ddnsd_conf () {

    echo "Opening configuration file for editing..."

    # Check if the user is root or has permission to edit the configuration file.
    # if check fails then rerun the script with sudo.
    root-check || { echo "Executing as root" ; exec sudo "$@" ; }

    case "${1}" in
        cloudflare|duckdns      )
            if test -f /etc/"${1}".conf.d/$1.conf ; then
                event-log "info" "Configuration file for ${1} already exists. Opening for editing..."
            else
                cp -av /usr/share/${_name}/example.conf /etc/"${1}".conf
            fi
        ;;
        --help|-h               ) echo "${_configInfo}" ; exit 0 ;;
        *                       )
            echo "Invalid option: ${1}. Use 'config --help' for usage information."
            exit 1
        ;;
    esac

    # Open the configuration file in the default editor
    if test -n "${_editor}" ; then
        "${_editor}" /etc/ddnsd.conf.d/"${1}".conf || {
            event-log "error" "Failed to open configuration file for ${1} in ${_editor}."
            exit 1
        }
    else
        event-log "error" "No editor set. Please set the EDITOR environment variable."
        exit 0
    fi

}

function restart_ddnsd () {

    root-check ; event-log "info" "Restarting ddnsd service..."

    # Remove the IP address file if it exists before restarting
    rm -f ${_ddnsdIPFile} || event-log "warning" "Failed to remove IP address file ${_ddnsdIPFile}. Continuing..."
    systemctl restart ddnsd.service || { event-log "error" "Failed to restart ddnsd service." ; exit 1 ; }

}

set -eo pipefail

_name="ddnsd"
_version="$(cat /usr/share/doc/${_name}/version 2>/dev/null || echo "unknown")"

_ddnsdIPFile="/tmp/ddnsd.ip"
_editor="${EDITOR:-nano}"

_config="$USER/.config/${_name}/config.yaml"

if [[ ! -f $_config ]] ; then
    echo "Configuration file not found: ${_config}"
    sleep 2
    cp -av /usr/share/${_name}/ddnsd.example.yaml "$_config" || {
        echo "Failed to copy example configuration to ${_config}" ; exit 1 ;
    }
    echo "Example configuration copied to ${_config}. Please edit the file and set the required values."
    sleep 2
    "${_editor}" "$_config" || {
        echo "Failed to open configuration file in ${_editor}." ; exit 1 ;
    }
fi

[[ "$(yq -r '.format' "$_config")" == "ddnsd" ]] ||
event-log "error" "Invalid configuration file format!"

### Global Configuration Variables ###

_lookup="$(yq -r '.ip_lookup' "$_config" 2> /dev/null)"
_provider="$(yq -r '.provider' "$_config" 2> /dev/null)"
_domain="$(yq -r '.domain' "$_config" 2> /dev/null)"
_token="$(yq -r '.token' "$_config" 2> /dev/null)"

### Cloudflare Specific Configuration Variables ###

_email="$(yq -r '.cloudflare.email' "$_config" 2> /dev/null)"
_method="$(yq -r '.cloudflare.method' "$_config" 2> /dev/null)"
_zone="$(yq -r '.cloudflare.zone' "$_config" 2> /dev/null)"
_proxy="$(yq -r '.cloudflare.proxy' "$_config" 2> /dev/null)"
_ttl="$(yq -r '.cloudflare.ttl' "$_config" 2> /dev/null)"

### DuckDNS Specific Configuration Variables ###

_insecure="$(yq -r '.duckdns.insecure' "$_config" 2> /dev/null)"
_verbose="$(yq -r '.duckdns.verbose' "$_config" 2> /dev/null)"

# Trap errors and log them
trap sign_handler SIGINT SIGTERM SIGQUIT

_versionInfo="$(cat <<EOF
${_name} - [ Version: ${_version} ] - License: GPLv3.0"
EOF
)"

_helpInfo="$(cat <<EOF
${_versionInfo}

Usage: ${_name} [start|stop|restart|status|config|help|version]

Options:
    start           Start monitoring for IP changes and update DDNS
    stop            Stop the ddnsd systemd service
    restart         Restart the ddnsd systemd service
    status          Show the status of the ddnsd service
    config          Show the current configuration (use 'config <provider>' to edit)
    help            Show this help message
    version         Show version information

Version: ${_version}
EOF
)"

_statusInfo="$(cat <<EOF
${_versionInfo}

DDNS Provider:          ${_provider:-not set}
Domain Name:            ${_domain:-not set}
IP Address:             $(cat /tmp/ddnsd.ip 2>/dev/null || echo "not set")

Service:                $(systemctl is-active --quiet ddnsd.service && echo "active" || echo "inactive")
DDNS Status:            $(ping -c 1 "${_domain}" &> /dev/null && echo "reachable" || echo "unreachable")

Configuration File:     ${_ddnsdConfig}
EOF
)"



# shellcheck disable=SC2154
case "${1}" in
    start                       ) monitor-ip-address     ;;
    stop                        ) stop-ddnsd             ;;
    restart                     ) restart_ddnsd          ;;
    status                      ) echo "${_statusInfo}"  ;;
    config                      ) edit_ddnsd_conf "$@"   ;;
    help                        ) echo "${_helpInfo}"    ;;
    version                     ) echo "${_versionInfo}" ;;
    *                           )
        echo "Invalid option: ${1}"
        echo "Use '${_name} help' for usage information."
        exit 1
esac

exit 0
