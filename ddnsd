#!/bin/env bash

# ddnsd - A simple dynamic DNS client script
# Copyright (C) 2025 Michael Schaecher <MichaelLeeSchaecher@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check if the script is run as root
function Root_Check () {

    (( "$(id -u)" == 0 )) || { echo "This script must be run as root" ; exit 1 ; }

}

function start_ddnsd () {
    echo "Starting ddnsd..."

    test -n "${_domainName}" || {
        echo "Domain name is not set. Please set DOMAIN_NAME in the configuration." ; exit 1 ;
    }

    test -n "${_apiToken}" || {
        echo "API token is not set. Please set API_TOKEN in the configuration." ; exit 1 ;
    }

    Root_Check

    # Monitor for updates
    while true ; do

        # Check for changes to the IP address using a subshell
        (
            while true ; do
                _currentIP="$(check_ip)"
                _savedIP="$(cat /tmp/ddnsd.ip)"

                if test "${_savedIP}" != "${_currentIP}" ; then
                    echo "IP changed: ${_currentIP}"
                    echo "${_currentIP}" > /tmp/ddnsd.ip
                fi
                sleep 1
            done
        ) &

        # if test "${_savedIP}" != "${_currentIP}" ; then
        #     echo "IP changed: ${_currentIP}"
        #     echo "${_currentIP}" > /tmp/ddnsd.ip

        inotifywait -m -e modify -t 0 /tmp/ddnsd.ip && {

            _setCurrentIP="$(cat /tmp/ddnsd.ip)"

            case "${_ddnsProvider}" in
                duck            ) duck_ddns       ;;
                cloudflare      ) cloudflare_ddns ;;
                *)
                    echo "Unsupported DDNS provider: ${_ddnsProvider}"
                    exit 1
                ;;
            esac
        }
    done
}

function stop_ddnsd () {

    echo "Stopping ddnsd..."

    Root_Check

    # Stop the ddnsd service and all instances of ddnsd
    pkill -f ddnsd || { echo "No ddnsd process found to stop." ; exit 0 ; }
}

function duck_ddns () {

    echo "Configuring DuckDNS..."

    local _duckDNSUrl _serviceType _verboseFlag

    _duckDNSUrl="https://www.duckdns.org/update?domains=${_domainName}&token=${_apiToken}&ip="
    _verboseFlag="verbose=${_duckDNSVerbose}"

    if test "${_duckDNSInsecure}" = "true" ; then
        serviceType="-kK"
        echo "Using insecure connection for DuckDNS."
    else
        serviceType="-k"
    fi

    # Verify if the domain name is set
    case "$(echo "url=${_duckDNSUrl}&${_verboseFlag}" | curl ${serviceType})" in
        *"OK"*              ) echo "DuckDNS update successful for domain ${_domainName}."      ;;
        *"KO"*              ) echo "DuckDNS update failed for domain ${_domainName}." ; exit 1 ;;
        *                   )
            echo "Unexpected response from DuckDNS: $(echo "url=${_duckDNSUrl}&${_verboseFlag}" | ${serviceType})"
            exit 1
        ;;
    esac

}

function cloudflare_ddns () {

    echo "Configuring Cloudflare DNS..."

    # Verify that the Cloudflare email set and is in the correct format
    [[ "${_cloudflareEmail}" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]] || {
        echo "Invalid Cloudflare email format: ${_cloudflareEmail}" ; exit 1
    }

    # Verify that the Cloudflare Zone ID is set
    test -n "${_cloudflareZoneID}" || { echo "Please set CLOUDFLARE_ZONE_ID in the configuration." ; exit 1 ; }

    local _serviceType _verboseFlag _currentIP _keyUrl _authHeader _cloudflareURL

    _keyUrl="https://api.cloudflare.com/client/v4/user/tokens/verify"
    _cloudflareURL="https://api.cloudflare.com/client/v4/zones"


    # Check if method is either token or global
    case "${_cloudflareMethod}" in
        "token"                 ) _authHeader="Authorization: Bearer" ;;
        "global"                ) _authHeader="X-Auth-Key"            ;;
        *                       )
            echo "Invalid Cloudflare method: ${_cloudflareMethod}. Use 'token' or 'global'."
            exit 1
        ;;
    esac

    verifyKey="$(curl -X GET "$_keyUrl" --header "${_authHeader} ${_apiToken}" \
        --header "Content-Type:  application/json" | jq -r '.result.status')"

    test "${verifyKey}" = "active" || { echo "(Cloudflare) API Token not active or invalid." ; exit 1 ; }

    _recordID=$(curl -s -X GET "${_cloudflareURL}/${_cloudflareZoneID}{/dns_records?type=A&name=${_domainName}}" \
        --header "X-Auth-Email: ${_cloudflareEmail}" \
        --header "${_authHeader} ${_apiToken}" \
        --header "Content-Type: application/json" | jq -r '.result[].id')

    test -n "${_recordID}" || { echo "No DNS record found for domain ${_domainName}." ; exit 1 ; }

     _recordUpdate="$(curl -s -X PATCH "${_cloudflareURL}/${_cloudflareZoneID}/dns_records/${_recordID}" \
        --header "X-Auth-Email: ${_cloudflareEmail}" \
        --header "${_authHeader} ${_apiToken}" \
        --header "Content-Type: application/json" \
        --data "{
            \"type\": \"A\",
            \"name\": \"${_domainName}\",
            \"content\": \"${_setCurrentIP}\",
            \"ttl\": ${_cloudflareTTL},
            \"proxied\": ${_cloudflareProxy}
        }" | jq -r '.success')"

        test "${_recordUpdate}" = "true" || { echo "${_domainName} dns record update failed." ; exit 1 ; }

}

function check_ip () {

    local _ip

    case "${_ipLookup}" in
        "icanhazip"         ) _ip="${_ipLookup}.com"   ;;
        "ipinfo"            ) _ip="${_ipLookup}.io/ip" ;;
        "ifconfig"          ) _ip="${_ipLookup}.co"    ;;
        * )
            echo "Unsupported IP lookup service: ${_ipLookup}"
            exit 1
        ;;
    esac

    # Verify the IP lookup service is reachable
    ping -c 1 "${_ip}" &> /dev/null || {
        echo "IP lookup service ${_ip} is not reachable. Please check your network connection."
        exit 1
    }

   curl -s "https://${_ip}"
}

function edit_ddnsd_conf () {

    echo "Opening configuration file for editing..."

    Root_Check

    # Open the configuration file in the default editor
    if test -n "${_editor}" ; then
        "${_editor}" /etc/ddnsd.conf || {
            echo "Failed to open configuration file in ${_editor}. Please check if the editor is installed."
            exit 1
        }
    else
        echo "No editor set. Please set the EDITOR environment variable to your preferred text editor."
        exit 1
    fi

}

set -eo pipefail

source ddnsd.conf || { echo "Missing configuration /etc/ddnsd.conf!" ; exit 1 ; }

# Global settings
_ddnsProvider="${DDNS_PROVIDER:-duck}"
_domainName="${DOMAIN_NAME}"
_apiToken="${API_TOKEN}"
_ipLookup="${IP_LOOKUP:-icanhazip}"

# DuckDNS settings
_duckDNSInsecure="${DUCKDNS_INSECURE:-false}"
_duckDNSVerbose="${DUCKDNS_VERBOSE:-false}"

# Cloudflare settings
_cloudflareEmail="${CLOUDFLARE_EMAIL}"
_cloudflareMethod="${CLOUDFLARE_METHOD:-token}"
_cloudflareZoneID="${CLOUDFLARE_ZONE_ID}"
_cloudflareProxy="${CLOUDFLARE_PROXY:-true}"
_cloudflareTTL="${CLOUDFLARE_TTL:-300}"

_editor="${EDITOR}"

_appName="ddnsd"
_appVersion="$(cat /usr/share/doc/${_appName}/version 2>/dev/null || echo "unknown")"
_appLicense="GPL-3.0"

_versionInfo="$(cat <<EOF
${_appName} - [ Version: ${_appVersion} ] - License: ${_appLicense}"
EOF
)"

_helpInfo="$(cat <<EOF
${_versionInfo}

Usage: ${_appName} [start|stop|restart|status|config|help|version]

Options:
    start           Start monitoring for IP changes and update DDNS
    stop            Stop the ddnsd systemd service
    restart         Restart the ddnsd systemd service
    status          Show the status of the ddnsd service
    config          Show the current configuration
    help            Show this help message
    version         Show version information

Version: ${_appVersion}
EOF
)"

_statusInfo="$(cat <<EOF
${_versionInfo}

DDNS Provider:          ${_ddnsProvider:-not set}
Domain Name:            ${_domainName:-not set}
IP Address:             $(cat /tmp/ddnsd.ip 2>/dev/null || echo "not set")

Service:                $(systemctl is-active --quiet ddnsd.service || echo "inactive")
DDNS Status:            $(ping -c 1 "${_domainName}" &> /dev/null &&
                            echo "reachable" || echo "unreachable")

Configuration File:     /etc/ddnsd.conf
EOF
)"

# shellcheck disable=SC2154
case "${1}" in
    start                   ) start_ddnsd              ;;
    stop                    ) stop_ddnsd               ;;
    restart                 )
        systemctl restart ddnsd.service || {
            echo "Failed to restart ddnsd service. Please check the service status."
            exit 1
        }
    ;;
    status                  ) echo "${_statusInfo}";;
    config                  ) edit_ddnsd_conf ;;
    help                    ) echo "${_helpInfo}";;
    version                 ) echo "${_versionInfo}";;
esac

exit 0
