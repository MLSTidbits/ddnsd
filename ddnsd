#!/bin/env bash

# ddnsd - A simple dynamic DNS client script
# Copyright (C) 2025 Michael Schaecher <MichaelLeeSchaecher@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check if the script is run as root
function root_check () {

    (( "$(id -u)" == 0 )) || { echo "This script must be run as root" ; exit 1 ; }

}

# shellcheck disable=SC2317
function sign_handler () {

    local _signal; _signal="${1:-SIGINT}"

    case "${_signal}" in
        SIGINT|SIGTERM|SIGQUIT  )
            event_log "info" "Received signal: ${_signal}. Stopping ddnsd service..."
        ;;
        *                       )
            event_log "warning" "Received unknown signal: ${_signal}"
        ;;
    esac

    exit 0

}

function event_log () {

    local _eventType="${1:-info}"
    local _eventMessage="${2:-No message provided}"

    case "${_eventType}" in
        info|warning|error|critical )
            logger -t "${_appName}" -p user.${_eventType} "${_eventMessage}"
        ;;
        *                           )
            logger -t "${_appName}" -p user.unknown "${_eventMessage}"
        ;;
    esac

}

function start_ddnsd () {

    root_check ; event_log "info" "Starting ddnsd service..."

    test -n "${_domainName}" || {
        echo "Domain name is not set. Please set DOMAIN_NAME in the configuration." ; exit 1 ;
    }

    test -n "${_apiToken}" || {
        echo "API token is not set. Please set API_TOKEN in the configuration." ; exit 1 ;
    }

    event_log "info" "Checking IP address ... $(check_ip)"

    while true ; do
        _currentIP="$(check_ip)" || { event_log "error" "IP lookup service ${_ipLookup} is not reachable!" ; exit 1 ;  }

        _savedIP="$(cat /tmp/ddnsd.ip 2>/dev/null || echo "unknown")"

        if test "${_savedIP}" != "${_currentIP}" ; then
            event_log "info" "IP address changed: ${_savedIP} -> ${_currentIP}"
            echo "${_currentIP}" > /tmp/ddnsd.ip

            case "${_ddnsProvider}" in
                duck            ) duck_ddnsd       ;;
                cloudflare      ) cloudflare_ddnsd ;;
                *               )
                    echo "Unsupported DDNS provider: ${_ddnsProvider}"
                    exit 1
                ;;
            esac

            event_log "info" "DDNS update completed for ${_domainName} with IP ${_currentIP}"
        fi

        sleep 5 ; continue
    done
}

function stop_ddnsd () {

    root_check ; event_log "info" "Stopping ddnsd service..."

    # Stop the ddnsd service and all instances of ddnsd
    pkill -f ddnsd || { echo "No ddnsd process found to stop." ; exit 0 ; }
}

function duck_ddnsd () {

    event_log "info" "Configuring DuckDNS for domain ${_domainName}..."

    local _duckDNSUrl _serviceType _verboseFlag

    _duckDNSUrl="https://www.duckdns.org/update?domains=${_domainName}&token=${_apiToken}&ip="
    _verboseFlag="verbose=${_duckDNSVerbose}"

    if test "${_duckDNSInsecure}" = "true" ; then
        serviceType="-kK"
        event_log "warning" "Using insecure connection for DuckDNS updates. This is not recommended."
    else
        serviceType="-k"
    fi

    # Verify if the domain name is set
    case "$(echo "url=${_duckDNSUrl}&${_verboseFlag}" | curl ${serviceType})" in
        *"OK"*              )
            event_log "info" "DuckDNS update successful for domain ${_domainName}."
        ;;
        *"KO"*              )
            event_log "error" "DuckDNS update failed for domain ${_domainName}."
            exit 1
        ;;
        *                   )
            event_log "error" "Unexpected response from DuckDNS for domain ${_domainName}."
            exit 1
        ;;
    esac

}

function cloudflare_ddnsd () {

    event_log "info" "Configuring Cloudflare for domain ${_domainName}..."

    # Verify that the Cloudflare email set and is in the correct format
    [[ "${_cloudflareEmail}" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]] || {
        echo "Invalid Cloudflare email format: ${_cloudflareEmail}" ; exit 1
    }

    # Verify that the Cloudflare Zone ID is set
    test -n "${_cloudflareZoneID}" || { echo "Please set CLOUDFLARE_ZONE_ID in the configuration." ; exit 1 ; }

    local _serviceType _verboseFlag _currentIP _keyUrl _authHeader _cloudflareURL

    _keyUrl="https://api.cloudflare.com/client/v4/user/tokens/verify"
    _cloudflareURL="https://api.cloudflare.com/client/v4/zones"


    # Check if method is either token or global
    case "${_cloudflareMethod}" in
        "token"                 ) _authHeader="Authorization: Bearer" ;;
        "global"                ) _authHeader="X-Auth-Key"            ;;
        *                       )
            echo "Invalid Cloudflare method: ${_cloudflareMethod}. Use 'token' or 'global'."
            exit 1
        ;;
    esac

    verifyKey="$(curl -X GET "$_keyUrl" --header "${_authHeader} ${_apiToken}" \
        --header "Content-Type:  application/json" | jq -r '.result.status')"

    test "${verifyKey}" = "active" || { echo "(Cloudflare) API Token not active or invalid." ; exit 1 ; }

    event_log "info" "Verified Cloudflare API token = ${verifyKey}"

    _recordID=$(curl -s -X GET "${_cloudflareURL}/${_cloudflareZoneID}{/dns_records?type=A&name=${_domainName}}" \
        --header "X-Auth-Email: ${_cloudflareEmail}" \
        --header "${_authHeader} ${_apiToken}" \
        --header "Content-Type: application/json" | jq -r '.result[].id')

    test -n "${_recordID}" || { echo "No DNS record found for domain ${_domainName}." ; exit 1 ; }

     _recordUpdate="$(curl -s -X PATCH "${_cloudflareURL}/${_cloudflareZoneID}/dns_records/${_recordID}" \
        --header "X-Auth-Email: ${_cloudflareEmail}" \
        --header "${_authHeader} ${_apiToken}" \
        --header "Content-Type: application/json" \
        --data "{
            \"type\": \"A\",
            \"name\": \"${_domainName}\",
            \"content\": \"${_currentIP}\",
            \"ttl\": ${_cloudflareTTL},
            \"proxied\": ${_cloudflareProxy}
        }" | jq -r '.success')"

        test "${_recordUpdate}" = "true" || { echo "${_domainName} dns record update failed." ; exit 1 ; }

    event_log "info" "Cloudflare DNS record updated successfully."

}

function check_ip () {

    local _ip

    case "${_ipLookup}" in
        "icanhazip"             ) _ip="${_ipLookup}.com"   ;;
        "ipinfo"                ) _ip="${_ipLookup}.io/ip" ;;
        "ifconfig"              ) _ip="${_ipLookup}.co"    ;;
        *                       )
            event_log "error" "Unsupported IP lookup service: ${_ipLookup}"
            exit 1
        ;;
    esac

    # Verify the IP lookup service is reachable
    ping -c 1 "${_ip}" &> /dev/null || {
        event_log "error" "IP lookup service ${_ip} is not reachable. Please check your network connection."
        exit 1
    }

    curl -s "https://${_ip}"
}

function edit_ddnsd_conf () {

    echo "Opening configuration file for editing..."

    root_check ; shift

    case "${1}" in
        cloudflare|duckdns      )
            if test -f /etc/"${1}".conf.d/$1.conf ; then
                event_log "info" "Configuration file for ${1} already exists. Opening for editing..."
            else
                cp -av /usr/share/${_appName}/example.conf /etc/"${1}".conf
            fi
        ;;
        --help|-h               ) echo "${_configInfo}" ; exit 0 ;;
        *                       )
            echo "Invalid option: ${1}. Use 'config --help' for usage information."
            exit 1
        ;;
    esac

    # Open the configuration file in the default editor
    if test -n "${_editor}" ; then
        "${_editor}" /etc/ddnsd.conf.d/"${1}".conf || {
            event_log "error" "Failed to open configuration file for ${1} in ${_editor}."
            exit 1
        }
    else
        event_log "error" "No editor set. Please set the EDITOR environment variable."
        exit 0
    fi

}

function restart_ddnsd () {

    root_check ; event_log "info" "Restarting ddnsd service..."

    # Remove the IP address file if it exists before restarting
    rm -f ${_ddnsdIPFile} || event_log "warning" "Failed to remove IP address file ${_ddnsdIPFile}. Continuing..."
    systemctl restart ddnsd.service || { event_log "error" "Failed to restart ddnsd service." ; exit 1 ; }

}

set -eo pipefail

_appName="ddnsd"
_appVersion="$(cat /usr/share/doc/${_appName}/version 2>/dev/null || echo "unknown")"
_appLicense="GPL-3.0"

_ddnsdConfig="/etc/ddnsd.conf"

_editor="${EDITOR:-nano}"

# shellcheck disable=SC1090
source ${_ddnsdConfig} || { event_log "error" "Failed to source configuration file ${_ddnsdConfig}!" ; exit 1 ; }

if test -f /etc/ddnsd.conf.d/cloudflare.conf ; then
    source /etc/ddnsd.conf.d/cloudflare.conf 2>/dev/null
else
    cp -av /usr/share/${_appName}/example.conf /etc/ddnsd.conf.d/cloudflare.conf
    $_editor /etc/ddnsd.conf.d/cloudflare.conf && restart_ddnsd
fi

if test -f /etc/ddnsd.conf.d/duckdns.conf ; then
    source /etc/ddnsd.conf.d/duckdns.conf 2>/dev/null
else
    cp -av /usr/share/${_appName}/example.conf /etc/ddnsd.conf.d/duckdns.conf
    $_editor /etc/ddnsd.conf.d/duckdns.conf && restart_ddnsd
fi


# Global settings
_ddnsProvider="${DDNS_PROVIDER:-duck}"
_domainName="${DOMAIN_NAME}"
_apiToken="${API_TOKEN}"
_ipLookup="${IP_LOOKUP:-icanhazip}"

# DuckDNS settings
_duckDNSInsecure="${DUCKDNS_INSECURE:-false}"
_duckDNSVerbose="${DUCKDNS_VERBOSE:-false}"

# Cloudflare settings
_cloudflareEmail="${CLOUDFLARE_EMAIL}"
_cloudflareMethod="${CLOUDFLARE_METHOD:-token}"
_cloudflareZoneID="${CLOUDFLARE_ZONE_ID}"
_cloudflareProxy="${CLOUDFLARE_PROXY:-true}"
_cloudflareTTL="${CLOUDFLARE_TTL:-300}"

_ddnsdIPFile="/tmp/ddnsd.ip"

# Trap errors and log them
trap sign_handler SIGINT SIGTERM SIGQUIT

_versionInfo="$(cat <<EOF
${_appName} - [ Version: ${_appVersion} ] - License: ${_appLicense}"
EOF
)"

_helpInfo="$(cat <<EOF
${_versionInfo}

Usage: ${_appName} [start|stop|restart|status|config|help|version]

Options:
    start           Start monitoring for IP changes and update DDNS
    stop            Stop the ddnsd systemd service
    restart         Restart the ddnsd systemd service
    status          Show the status of the ddnsd service
    config          Show the current configuration (use 'config <provider>' to edit)
    help            Show this help message
    version         Show version information

Version: ${_appVersion}
EOF
)"

_configInfo="$(cat <<EOF
${_versionInfo}

Usage: ${_appName} config [cloudflare|duckdns|--help|-h]

Options:
    cloudflare      Copy the example Cloudflare configuration to /etc/${_appName}.conf
    duckdns         Copy the example DuckDNS configuration to /etc/${_appName}.conf
    --help|-h       Show this help message

Version: ${_appVersion}
EOF
)"

_statusInfo="$(cat <<EOF
${_versionInfo}

DDNS Provider:          ${_ddnsProvider:-not set}
Domain Name:            ${_domainName:-not set}
IP Address:             $(cat /tmp/ddnsd.ip 2>/dev/null || echo "not set")

Service:                $(systemctl is-active --quiet ddnsd.service && echo "active" || echo "inactive")
DDNS Status:            $(ping -c 1 "${_domainName}" 2> /dev/null && echo "reachable" || echo "unreachable")

Configuration File:     ${_ddnsdConfig}
EOF
)"



# shellcheck disable=SC2154
case "${1}" in
    start                       ) start_ddnsd            ;;
    stop                        ) stop_ddnsd             ;;
    restart                     ) restart_ddnsd          ;;
    status                      ) echo "${_statusInfo}"  ;;
    config                      ) edit_ddnsd_conf "$@"   ;;
    help                        ) echo "${_helpInfo}"    ;;
    version                     ) echo "${_versionInfo}" ;;
    *                           )
        echo "Invalid option: ${1}"
        echo "Use '${_appName} help' for usage information."
        exit 1
esac

exit 0
